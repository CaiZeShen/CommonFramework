//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MsgBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MsgBase), typeof(System.Object));
		L.RegFunction("GetManagerID", GetManagerID);
		L.RegFunction("GetMananger", GetMananger);
		L.RegFunction("GetNetBytes", GetNetBytes);
		L.RegFunction("GetState", GetState);
		L.RegFunction("New", _CreateMsgBase);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("msgID", get_msgID, set_msgID);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMsgBase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				MsgBase obj = new MsgBase();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ushort>(L, 1))
			{
				ushort arg0 = (ushort)LuaDLL.lua_tonumber(L, 1);
				MsgBase obj = new MsgBase(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MsgBase.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetManagerID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MsgBase obj = (MsgBase)ToLua.CheckObject<MsgBase>(L, 1);
			ManagerID o = obj.GetManagerID();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMananger(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MsgBase obj = (MsgBase)ToLua.CheckObject<MsgBase>(L, 1);
			int o = obj.GetMananger();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MsgBase obj = (MsgBase)ToLua.CheckObject<MsgBase>(L, 1);
			byte[] o = obj.GetNetBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MsgBase obj = (MsgBase)ToLua.CheckObject<MsgBase>(L, 1);
			byte o = obj.GetState();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_msgID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MsgBase obj = (MsgBase)o;
			ushort ret = obj.msgID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index msgID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_msgID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			MsgBase obj = (MsgBase)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.msgID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index msgID on a nil value" : e.Message);
		}
	}
}

