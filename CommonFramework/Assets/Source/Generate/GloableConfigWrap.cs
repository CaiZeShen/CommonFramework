//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GloableConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GloableConfig), typeof(System.Object));
		L.RegFunction("New", _CreateGloableConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ipAddress", get_ipAddress, set_ipAddress);
		L.RegVar("port", get_port, set_port);
		L.RegVar("isNetPlayer", get_isNetPlayer, set_isNetPlayer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGloableConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GloableConfig obj = new GloableConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GloableConfig.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ipAddress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			string ret = obj.ipAddress;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ipAddress on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			ushort ret = obj.port;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index port on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isNetPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			bool ret = obj.isNetPlayer;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isNetPlayer on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ipAddress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ipAddress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ipAddress on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.port = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index port on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isNetPlayer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GloableConfig obj = (GloableConfig)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isNetPlayer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isNetPlayer on a nil value" : e.Message);
		}
	}
}

